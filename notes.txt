### Creating a new Contract, you'll need to add it to:
```
tests/compile.js
tests/deploy.js
tests/galleass.js publish()
tests/publish.js
app/App.js?
```

### Exporting all layers to files (the alphabet/citizen from psd)
```
File -> Scripts -> Browse
~/Photoshop something something/something.jsx
run
(script comes from https://github.com/jwa107/Photoshop-Export-Layers-as-Images)
```

### Events Parsing
```
Set DEBUG_SYNCCITIZENS to true to see how bad it is
I have a new event parser built and I should integrate it into Galleass
```

### Possible Changes
```
Maybe there should be an indicator above a tile for each citizen there
Fish should pay more Copper
A village should cost 4 Timber instead of 6
Citizen chars are uint16 but you could have more if you use uint8
Citizen status should probably be uint16
```

### Before Staging
```
It can take a while when you click on a building for the modal to throw... may pop something above the building up that looks like a loader
StandardToken inventory should be based on a per-tile basis... right now it show the inv for the contract.. it needs to also be withdrawal from the landowner
(When you send a token to a contract address it somehow needs to know which one (677 data?))
Harbor and FishMonger need to be moved over to landOwner system instead of contract owner

More tokens in the Market by default
Maybe grass and mountain tiles could also produce resources like the timbercamp?
The Sea should become The Bay and a new "Sea" is more about moving from island to island (Bay is 1 dogger per address, but Sea will track by Galley address)
```

### Once staging
```
Make sure it looks good on all phones
Transactions should show up in bottom left to give progress bars to non-ship button clicks
Make sure all things link to etherscan correctly
```

### Neat things to write about
```
fully decentralized means each iteration lives forever on ipfs (no backend servers to upgrade, etc)
main contract never change and if it does you use descendant system
from there you have auth system getContract and hasPermission
which brings up all the different ways to move tokens... authorize and then transfer (two tx, harbor does it to build ships), 667 transfer and call (parse data), give contract permission to transfer (soft/hard assets)
contract "library" so the contract only holds who owns what and all the business logic is in an upgradable contract (until production flag is set)
the whole event triggered paradigm is really efficient... like how the clouds or resources or sailing works
multiplayer so massive it comes down to what can be displayed ... with the ethereum blockchain as the only backend
```
