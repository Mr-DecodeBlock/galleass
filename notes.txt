### Creating a new Contract, you'll need to add it to:
```
tests/compile.js
tests/deploy.js
tests/galleass.js publish()
tests/publish.js
app/App.js?
```

### Exporting all layers to files (the alphabet/citizen from psd)
```
File -> Scripts -> Browse
~/Photoshop something something/something.jsx
run
(script comes from https://github.com/jwa107/Photoshop-Export-Layers-as-Images)
```

### Events Parsing
```
Set DEBUG_SYNCCITIZENS to true to see how bad it is
I have a new event parser built and I should integrate it into Galleass
```

### Possible Changes
```
get Carter a paragraph or two
I think Citizen.data should be bytes32 instead of uint256 just because it could be used for more than just the price in the future
Maybe there should be an indicator above a tile for each citizen there
Fish should pay more Copper
A village should cost 4 Timber instead of 6
Citizen chars are uint16 but you could have more if you use uint8
Citizen status should probably be uint16
```

### TODO
```
if you put in coords in the url that don't exist it should take you to the main url instead of showing a blank island
Timber -> timber in images
Add alt="#LETTER#" to handwriting
map needs a bad ass compass and some wave lines and maybe a bit of a blue backdrop fade behind islands
The left side of the fishmonger and harbor don't line up right
look at how the screen adjusts on mobile.. the clickscreen and map are weird when an iphone zooms
clevis contract Timber -- this command should print a help for all the commands for that contract and the argument order etc
[-] citizen with greens sends 3 copper and 1 greens and it doesn't seem to work!?
it would be cool on the testnet to have a request ether button that sends them like 0.01 or something on ropsten
now that the loader waits longer, there are checkpoints along the way that could update a loader bar just to give a little more feedback
```


### Neat Things
```
fully decentralized means each iteration lives forever on ipfs (no backend servers to upgrade, etc)
main contract never change and if it does you use descendant system
from there you have auth system getContract and hasPermission
which brings up all the different ways to move tokens... authorize and then transfer (two tx, harbor does it to build ships), 667 transfer and call (parse data), give contract permission to transfer (soft/hard assets)
  -- give examples of different ways to move... for instance, building a villages, the Landlib just *takes* 6 timber from you.. this might be frowned upon by contract auditors or players
  -- this could easily be replace by a 677 method
contract "library" so the contract only holds who owns what and all the business logic is in an upgradable contract (until production flag is set)
the whole event triggered paradigm is really efficient... like how the clouds or resources or sailing works
multiplayer so massive it comes down to what can be displayed ... with the ethereum blockchain as the only backend
I'm building it with the assumption that tranastions will be 100x cheaper or it will run on a side chain or something... there is no way you would want to pay full mainnet costs
citizens have different characteristics based on what you feed them, different genetics are random for now but will be based on bloodlines
lots of (not)fun web2.0 problems like mobile responsiveness/service worker issues along with awesome web3.0 blockchain-as-backend leads to other issues like slow ui
gitcoin and cent.co and how you can incentivize developers to help out .. build a fishing bot.. avsa's tweet about what a good game should have
Sky contract is stateless but allow for animation after a single event is triggered (cheap af to 'paint' clouds on the 'chain)
```
